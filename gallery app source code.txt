NFT. GRUP, [1/3/2025 7:31 AM]
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

NFT. GRUP, [1/3/2025 7:31 AM]
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- GridView for displaying the images -->
    <GridView
        android:id="@+id/gridView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:columnWidth="100dp"
        android:numColumns="3"
        android:horizontalSpacing="10dp"
        android:verticalSpacing="10dp"
        android:padding="5dp"
        android:stretchMode="columnWidth"
        android:gravity="center"/>

</RelativeLayout>

NFT. GRUP, [1/3/2025 7:31 AM]
package com.example.galleryapp;

import android.Manifest;
import android.content.ContentResolver;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.GridView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_STORAGE_PERMISSION = 1;
    private GridView gridView;
    private ArrayList<Bitmap> imageList;
    private ImageAdapter imageAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        gridView = findViewById(R.id.gridView);
        imageList = new ArrayList<>();
        imageAdapter = new ImageAdapter(this, imageList);

        // Check for storage permissions
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) 
                == PackageManager.PERMISSION_GRANTED) {
            loadImages();
        } else {
            ActivityCompat.requestPermissions(this, 
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 
                    REQUEST_STORAGE_PERMISSION);
        }

        gridView.setAdapter(imageAdapter);
    }

    // Handle permission request result
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == REQUEST_STORAGE_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                loadImages();
            } else {
                Toast.makeText(this, "Permission denied!", Toast.LENGTH_SHORT).show();
            }
        }
    }

    // Method to load images from the device's gallery
    private void loadImages() {
        ContentResolver contentResolver = getContentResolver();
        String[] projection = {MediaStore.Images.Media._ID};
        Cursor cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projection, 
                null, null, null);

        if (cursor != null) {
            while (cursor.moveToNext()) {
                int idColumnIndex = cursor.getColumnIndex(MediaStore.Images.Media._ID);
                long id = cursor.getLong(idColumnIndex);
                Bitmap image = getImage(id);
                imageList.add(image);
            }
            cursor.close();
            imageAdapter.notifyDataSetChanged();
        }
    }

    // Method to convert image URI to Bitmap
    private Bitmap getImage(long id) {
        String imageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString() + "/" + id;
        try {
            return BitmapFactory.decodeStream(getContentResolver().openInputStream(
                    android.net.Uri.parse(imageUri)));
        } catch (Exception e) {
            Log.e("GalleryApp", "Error loading image", e);
            return null;
        }
    }
}

NFT. GRUP, [1/3/2025 7:31 AM]
package com.example.galleryapp;

import android.content.Context;
import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;

import java.util.ArrayList;

public class ImageAdapter extends BaseAdapter {

    private Context context;
    private ArrayList<Bitmap> imageList;

    public ImageAdapter(Context context, ArrayList<Bitmap> imageList) {
        this.context = context;
        this.imageList = imageList;
    }

    @Override
    public int getCount() {
        return imageList.size();
    }

    @Override
    public Object getItem(int position) {
        return imageList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ImageView imageView;
        if (convertView == null) {
            imageView = new ImageView(context);
            imageView.setLayoutParams(new GridView.LayoutParams(200, 200));  // Set image size
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        } else {
            imageView = (ImageView) convertView;
        }

        imageView.setImageBitmap(imageList.get(position));
        return imageView;
    }
}

NFT. GRUP, [1/3/2025 7:31 AM]
package com.example.galleryapp;

import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.widget.ImageView;

import androidx.appcompat.app.AppCompatActivity;

public class FullScreenActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_full_screen);

        ImageView imageView = findViewById(R.id.fullScreenImage);
        Intent intent = getIntent();
        Bitmap image = intent.getParcelableExtra("image");

        imageView.setImageBitmap(image);
    }
}

NFT. GRUP, [1/3/2025 7:31 AM]
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <ImageView
        android:id="@+id/fullScreenImage"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:scaleType="centerInside"/>
</LinearLayout>

NFT. GRUP, [1/3/2025 7:32 AM]
// Inside ImageAdapter.java getView method
imageView.setOnClickListener(v -> {
    Intent intent = new Intent(context, FullScreenActivity.class);
    intent.putExtra("image", imageList.get(position));  // Pass the selected image
    context.startActivity(intent);
});